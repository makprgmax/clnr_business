import streamlit as st
from graph import build_graph
from chat_memory import conversation
from langchain.callbacks import LangChainTracer
from langchain.chains import ConversationChain



tracer = LangChainTracer()

st.set_page_config(page_title="üõí Shopping Assistant")

st.title(" –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–∫—É–ø–æ–∫")

user_input = st.text_input("–ö–∞–∫–∞—è –≤–∞—à–∞ —Ü–µ–ª—å –¥–ª—è –ø–æ–∫—É–ø–æ–∫?")
budget = st.number_input("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç ($)", min_value=0.0, value=25.0, step=1.0)

if st.button("–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫"):
    if not user_input.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –ø–æ–∫—É–ø–æ–∫.")
    else:
        graph = build_graph()
        state = {
            "user_input": user_input,
            "budget": budget
        }

        with st.spinner("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."):
            output = graph.invoke(state, callbacks=[tracer])

        if output.get("status") == "over_budget":
            st.error("‚ùå –ë—é–¥–∂–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!")
            st.write(output.get("message"))
        else:
            st.success("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≥–æ—Ç–æ–≤!")
            st.subheader(f"üìã {output.get('recipe_name', '–†–µ—Ü–µ–ø—Ç')}")
            
            products = output.get("shopping_list", [])
            total = output.get("total_cost", 0.0)

            for item in products:
                st.write(f"- {item['product']} ‚Äî ${item['price']:.2f}")

            st.markdown(f"**üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${total:.2f}")



